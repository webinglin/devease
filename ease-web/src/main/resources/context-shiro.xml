<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd ">

    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的Realm.java -->
    <bean id="loginAuthorizingRealm" class="com.piedra.platease.shiro.realm.LoginAuthorizingRealm"/>

    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
    <!-- <property name="sessionMode" value="native"/> -->

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- URL重写中去掉jsessionId -->
        <property name="sessionIdUrlRewritingEnabled"  value="false"  />
        <!-- 超时时间  一个小时 3600000 -->
        <property name="globalSessionTimeout" value="3600000" />

        <!-- 定时检查失效的session,默认true -->
        <property name="sessionValidationSchedulerEnabled" value="true" />
        <!-- 删除过期的session,默认true -->
        <property name="deleteInvalidSessions" value="true" />
        <!-- 相隔多久检查一次session的有效性,使用默认的20分钟 1200000  -->
        <property name="sessionValidationInterval" value="1200000" />

        <!-- 定义自己的session监听器，在过期的时候清空需要清空的数据 -->
        <property name="sessionListeners">
            <list>
                <bean class="com.piedra.platease.shiro.listener.ShiroSessionListener"/>
            </list>
        </property>
    </bean>

    <!-- 缓存管理器 -->
    <bean id="ehcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
    </bean>

    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="loginAuthorizingRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="ehcacheManager" />
    </bean>

    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/"/>
        <property name="unauthorizedUrl" value="/unAuth"/>
        <property name="filterChainDefinitions">
            <value>
                /js/** = anon
                /css/** = anon
                /images/** = anon
                /plugins/** = anon
                /static/** = anon

                / = anon
                /login = anon
                /unAuth = anon
                /logout = user

                <!-- 只要登录就可以访问 -->
                /home = user
                <!-- 不是权限细粒度的资源请求，可以通过加上ajax这样的规则跳过资源的验证，而只进行用户登录验证 TODO 该方法待验证 -->
                /**/ajax/** = user

                <!-- 多个过滤器用都好分割 -->
                /** = user,accessPerms
            </value>
        </property>
        <!-- 声明自定义的过滤器 -->
        <property name="filters">
            <map>
                <entry key="accessPerms"  value-ref="accessPerms" />
            </map>
        </property>
    </bean>
</beans>